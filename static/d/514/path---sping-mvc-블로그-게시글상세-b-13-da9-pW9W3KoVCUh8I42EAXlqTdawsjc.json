{"data":{"site":{"siteMetadata":{"title":"Jeonglab Devlog","author":"Jeonglab"}},"markdownRemark":{"id":"e652aad6-5949-5985-82a6-24ff0a66a5f0","excerpt":"블로그 - 게시글 상세 (상세페이지)게시글 상세상세페이지 <—이전글, 다음글 추가하기…","html":"<h2>블로그 - 게시글 상세 (상세페이지)</h2>\n<h3><strong>게시글 상세</strong></h3>\n<ul>\n<li><strong>상세페이지</strong> &#x3C;—</li>\n<li>이전글, 다음글 추가하기</li>\n</ul>\n<h3>1. 테이블 설계</h3>\n<p>넘나 미개한 테이블 설계…\n아직 컬럼 타입에 대한 길이 설정을 어떻게 해야할지 잘 모르겠다.<br>\n차차 공부하여 적절하게 수정하기로 하고 아래와 같이 테이블을 만들고 테스트 데이터를 몇개 집어넣었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span>POST<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">`</span>POST_ID<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'게시글 ID'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>POST_TITLE<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'게시글 제목'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>POST_CONTENT<span class=\"token punctuation\">`</span> <span class=\"token keyword\">text</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'게시글 본문 내용'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>POST_USERNAME<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'게시글 작성자'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>POST_DATETIME<span class=\"token punctuation\">`</span> <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'게시글 작성 일자'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>POST_UPDATETIME<span class=\"token punctuation\">`</span> <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'최종 수정 시간'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>POST_SECRET<span class=\"token punctuation\">`</span> <span class=\"token keyword\">tinyint</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'비밀글 여부'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>POST_HIT<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'조회수'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>POST_ID<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8 <span class=\"token keyword\">COMMENT</span><span class=\"token operator\">=</span><span class=\"token string\">'게시글'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>2. PostVO</h3>\n<p><code class=\"language-text\">Lombok</code>을 설치하여 VO를 간소화, 처음에 테이블 컬럼명과 네이밍이 틀려서 어떻게 해야하나 고민했는데 조금 검색하다보니 Mybatis 설정을 통해 해결 하였는데 너무나 신박하다.\n까먹지 않기 위해 따로 정리를 하자!</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostVO</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> postId<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> postTitle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> postContent<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> postUserName<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> postDatetime<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> postUpdatetime<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> postSecret<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> postHit<span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>3. PostMapper</h3>\n<p>게시글 한건을 조회하기 위한 쿼리를 테스트 해보고 Mapper를 미리 만들었다.<br>\n<code class=\"language-text\">selectPost</code>는 한건을 조회하기 위한 쿼리이고 <code class=\"language-text\">updatePostHit</code>은 조회수 증가를 위한 쿼리이다.<br>\n게시글 비공개 여부에 대한 조건은 나중에 사용자를 추가하면서 처리할 생각..</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>com.jeong.blog.mapper.postMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>selectPost<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>int<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>com.jeong.blog.web.vo.PostVO<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\tSELECT POST_ID, POST_TITLE, POST_CONTENT, POST_USERNAME, POST_DATETIME, POST_UPDATETIME, POST_SECRET, POST_HIT\n\t\tFROM jlog.POST\n\t\tWHERE POST_ID = #{postId};\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span>\n\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>update</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>updatePostHit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>com.jeong.blog.web.vo.PostVO<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\tUPDATE jlog.POST\n\t\tSET POST_HIT=POST_HIT + 1\n\t\tWHERE POST_ID=#{postId};\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>update</span><span class=\"token punctuation\">></span></span>\n\t\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3>4. PostController</h3>\n<p>블로그 글을 보기위해 컨트롤러를 작성하고 <code class=\"language-text\">@PathVariable</code> 어노테이션을 이용해 <code class=\"language-text\">postId</code>값을 받아 서비스를 호출하고 결과로 넘어온 객체를 그대로 뷰에 전달하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostController</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token class-name\">PostService</span> postService<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/post/view/{postId}\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span> <span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token keyword\">int</span> postId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Model</span> model <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========== REQUEST START : /post/{postId} ==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">>>>> postId : {}\"</span><span class=\"token punctuation\">,</span> postId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tmodel<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span> postService<span class=\"token punctuation\">.</span><span class=\"token function\">getPost</span><span class=\"token punctuation\">(</span>postId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"post/view\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>5. PostService &#x26; PostServiceImpl</h3>\n<p>아직은 특별히 처리해야할 로직이 없어 <code class=\"language-text\">postId</code>에 해당하는 게시글을 하나 가져와서 <code class=\"language-text\">PostVO</code> 객체를 리턴시키는 <code class=\"language-text\">viewPost</code> 메서드를 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PostService</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">PostVO</span> <span class=\"token function\">viewPost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> postId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>실제 <code class=\"language-text\">viewPost</code> 메서드를 구현한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">PostService</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token annotation punctuation\">@Autowired</span>\n\t<span class=\"token class-name\">PostDAO</span> postDAO<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">PostVO</span> <span class=\"token function\">viewPost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> postId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========= SERVICE START : viewPost ==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">return</span> postDAO<span class=\"token punctuation\">.</span><span class=\"token function\">viewPost</span><span class=\"token punctuation\">(</span>postId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>6. PostDAO</h3>\n<p>앞서 <code class=\"language-text\">postMapper</code>에 작성된 쿼리를 사용하여 조회수를 먼저 증가시키고 해당하는 게시글을 한건 가져온다.<br>\n여기서 하나 고민이 생긴게 현재 상태는 조회수가 무조건 증가되어버리는데 이미 조회된 게시글에 대한 조회수 증가를 어떻게 처리해야할지 고민이다..</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostDAO</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractDAO</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> namespace <span class=\"token operator\">=</span><span class=\"token string\">\"com.jeong.blog.mapper.postMapper\"</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">PostVO</span> <span class=\"token function\">viewPost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> postId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========= DAO START : getPost ==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">// 조회수 증가</span>\n\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>namespace <span class=\"token operator\">+</span> <span class=\"token string\">\".updatePostHit\"</span><span class=\"token punctuation\">,</span> postId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PostVO</span><span class=\"token punctuation\">)</span> <span class=\"token function\">selectOne</span><span class=\"token punctuation\">(</span>namespace <span class=\"token operator\">+</span> <span class=\"token string\">\".selectPost\"</span><span class=\"token punctuation\">,</span> postId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>실행결과</h3>\n<p>이제 상세페이지 조회를 위한 기본적인 것들을 작성하였으니 서버를 실행하고 크롬으로 확인을 해본다.</p>\n<p>URL : <a href=\"http://localhost:8080/post/view/5\">http://localhost:8080/post/view/5</a></p>\n<hr>\n<p><img src=\"images/result_1.jpg\" alt=\"실행결과\"></p>\n<h3>정리하기</h3>\n<p>전체적인 흐름을 한번 생각해보자 컨트롤러에 매핑된 주소로 게시글 번호를 넘겨 컨트롤러에서 서비스를 호출고 DAO를 통해 DB에 접근하여 리턴받은 결과를 통해 다시 뷰에 보내서 페이지를 만든다.<br>\n생각보다 수월하게 진행이 되었고 재미있다 코딩과는 별개로 아직은 비즈니스 로직같은 각 계층에 대한 개념이 조금 명확하지 않은것같다 시간날때 틈틈히 많은 글들을 읽어보자. </p>","frontmatter":{"title":"블로그 - 게시글 상세 (상세페이지)","date":"June 09, 2019","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/spingMVC/블로그_게시글상세/","previous":null,"next":null}}